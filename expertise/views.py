# expertise/views.py

from django.shortcuts import get_object_or_404, render
from django.urls import reverse_lazy
from django.views.generic import ListView, DetailView, CreateView, UpdateView, DeleteView
from .models import PersonnelNavigant, FicheEvenement
from django.db.models import Q
from .forms import BordereauSelectionForm  # <-- Voil√†
from num2words import num2words  # ‚úÖ Importer la fonction


import io
import base64
import barcode
from barcode.writer import ImageWriter



# ----- VUES POUR LES PERSONNELS -----

class PersonnelListView(ListView):
    model = PersonnelNavigant
    template_name = 'expertise/personnel_list.html'
    context_object_name = 'personnels'
    
    def get_queryset(self):
        queryset = super().get_queryset()
        query = self.request.GET.get('q')
        if query:
            queryset = queryset.filter(
                Q(nom__icontains=query) |
                Q(prenom__icontains=query) |
                Q(dn__icontains=query)
            )
        return queryset


class PersonnelDetailView(DetailView):
    """
    Affiche le d√©tail d'un personnel navigant, identifi√© par son DN.
    Ajoute √©galement dans le contexte la liste des √©v√©nements associ√©s.
    """
    model = PersonnelNavigant
    template_name = 'expertise/personnel_detail.html'
    context_object_name = 'personnel'
    slug_field = 'dn'
    slug_url_kwarg = 'dn'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        # Gr√¢ce au related_name 'evenements' d√©fini dans le mod√®le FicheEvenement,
        # on peut acc√©der aux √©v√©nements via self.object.evenements.all()
        context['evenements'] = self.object.evenements.all()
        return context


class PersonnelCreateView(CreateView):
    """
    Permet d'ajouter un nouveau personnel navigant.
    """
    model = PersonnelNavigant
    fields = ['dn', 'nom', 'prenom', 'date_de_naissance', 'sexe', 'statut_pn', 'compagnie']
    template_name = 'expertise/personnel_form.html'
    success_url = reverse_lazy('personnel_list')


class PersonnelUpdateView(UpdateView):
    model = PersonnelNavigant
    fields = ['dn', 'nom', 'prenom', 'date_de_naissance', 'sexe', 'statut_pn', 'compagnie']
    template_name = 'expertise/personnel_form.html'
    success_url = reverse_lazy('personnel_list')
    slug_field = 'dn'
    slug_url_kwarg = 'dn'



class PersonnelDeleteView(DeleteView):
    model = PersonnelNavigant
    template_name = 'expertise/personnel_confirm_delete.html'
    success_url = reverse_lazy('personnel_list')
    slug_field = 'dn'
    slug_url_kwarg = 'dn'



# ----- VUES POUR LES EVENEMENTS -----

# expertise/views.py

class FicheEvenementCreateView(CreateView):
    model = FicheEvenement
    fields = [
        'date_evenement',
        'cs_cempn', 'date_cempn', 'honoraire_cempn', 'medecin_cempn',
        'cs_oph', 'date_cs_oph', 'honoraire_cs_oph', 'medecin_oph',
        'cs_orl', 'date_cs_orl', 'honoraire_cs_orl', 'medecin_orl',
        'cs_labo', 'date_cs_labo', 'honoraire_cs_labo',
        'cs_lbx', 'date_cs_lbx', 'honoraire_cs_lbx',
        'cs_radio', 'date_cs_radio', 'honoraire_cs_radio', 'medecin_radio',
        'recherche_toxique', 'medecin_cempn', 'medecin_oph', 'medecin_orl', 'medecin_radio',
        'frais_dossier',
        'quote_part_patient',
        'paiement', 'date_paiement', 'modalite_paiement',
    ]
    template_name = 'expertise/evenement_form.html'
    # La suite de la vue reste identique...


    def form_valid(self, form):
        dn = self.kwargs['dn']
        personnel = get_object_or_404(PersonnelNavigant, dn=dn)
        form.instance.personnel = personnel
        return super().form_valid(form)

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['dn'] = self.kwargs['dn']
        personnel = get_object_or_404(PersonnelNavigant, dn=self.kwargs['dn'])
        context['evenements'] = personnel.evenements.all()
        return context

    def get_success_url(self):
        return reverse_lazy('personnel_detail', kwargs={'dn': self.object.personnel.dn})


class FicheEvenementUpdateView(UpdateView):
    model = FicheEvenement
    fields = [
        'date_evenement',
        'cs_cempn', 'date_cempn', 'honoraire_cempn',
        'cs_oph', 'date_cs_oph', 'honoraire_cs_oph',
        'cs_orl', 'date_cs_orl', 'honoraire_cs_orl',
        'cs_labo', 'date_cs_labo', 'honoraire_cs_labo',
        'cs_lbx', 'date_cs_lbx', 'honoraire_cs_lbx',
        'cs_radio', 'date_cs_radio', 'honoraire_cs_radio',
        'recherche_toxique', 'medecin_cempn', 'medecin_oph', 'medecin_orl', 'medecin_radio',
        'frais_dossier',
        'quote_part_patient',  # Positionn√© ici aussi
        'paiement', 'date_paiement', 'modalite_paiement',
    ]
    template_name = 'expertise/evenement_form.html'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['dn'] = self.object.personnel.dn
        return context

    def get_success_url(self):
        return reverse_lazy('personnel_detail', kwargs={'dn': self.object.personnel.dn})


class FicheEvenementDeleteView(DeleteView):
    """
    Permet de supprimer un √©v√©nement.
    """
    model = FicheEvenement
    template_name = 'expertise/evenement_confirm_delete.html'

    def get_success_url(self):
        return reverse_lazy('personnel_detail', kwargs={'dn': self.object.personnel.dn})

# expertise/views.py

import io
import base64
import barcode
from barcode.writer import ImageWriter
from django.views.generic import DetailView
from .models import FicheEvenement

import io
import base64
import barcode
from barcode.writer import ImageWriter
from django.views.generic import DetailView
from .models import FicheEvenement

import io
import base64
import barcode
from barcode.writer import ImageWriter
from django.views.generic import DetailView
from .models import FicheEvenement

class FactureView(DetailView):
    model = FicheEvenement
    template_name = 'expertise/facture.html'
    context_object_name = 'evenement'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        invoice_number = self.object.no_facture
        if invoice_number:
            Code128 = barcode.get_barcode_class('code128')
            barcode_instance = Code128(invoice_number, writer=ImageWriter())
            buffer = io.BytesIO()
            barcode_instance.write(buffer)
            barcode_base64 = base64.b64encode(buffer.getvalue()).decode('utf-8')
            context['barcode'] = barcode_base64
        return context

    # expertise/views.py

from django.shortcuts import render, get_object_or_404
from django.utils import timezone
from .models import FicheEvenement, CompagnieAerienne
from datetime import date

from django.shortcuts import render, get_object_or_404
from datetime import datetime
from .models import CompagnieAerienne, FicheEvenement
from .utils import nombre_en_lettres


def bordereau_view(request, annee, mois, iata):
    # üìå V√©rifier que la compagnie existe
    compagnie = get_object_or_404(CompagnieAerienne, iata=iata)

    # üìå Filtrer les √©v√©nements li√©s √† la compagnie et la p√©riode
    evenements = FicheEvenement.objects.filter(
        date_evenement__year=annee,
        date_evenement__month=mois,
        personnel__compagnie=compagnie
    )

    # ‚úÖ Debugging : Affiche les √©v√©nements trouv√©s
    print(f"DEBUG: Nombre d'√©v√©nements trouv√©s : {evenements.count()}")
    for e in evenements:
        print(f"Facture: {e.no_facture}, DN: {e.personnel.dn}, Nom: {e.personnel.nom}, Pr√©nom: {e.personnel.prenom}, Total: {e.total}XPF")

    # üìå Ajout de la date du bordereau (date actuelle)
    date_bordereau = datetime.today().strftime('%d/%m/%Y')

    # üìå G√©n√©ration du num√©ro de bordereau
    no_bordereau = f"EB{datetime.today().day:02d}{mois:02d}{str(annee)[-2:]}{iata}"

    # üìå Calcul du nombre de factures et du total g√©n√©ral
    nombre_factures = evenements.count()
    total_global = sum(e.total for e in evenements)
    total_global_lettres = nombre_en_lettres(total_global)  # üî• Convertir en lettres

    # ‚úÖ Debugging : Affiche les informations essentielles
    print(f"DEBUG: Date Bordereau = {date_bordereau}, Num√©ro Bordereau = {no_bordereau}")
    print(f"DEBUG: IATA re√ßu = {iata}, Nombre de factures = {nombre_factures}, Total g√©n√©ral = {total_global}")

    return render(request, "expertise/bordereau.html", {
        "evenements": evenements,  # ‚úÖ V√©rifie que cette variable est bien transmise
        "mois": mois,
        "annee": annee,
        "iata": iata,
        "compagnie": compagnie,
        "date_bordereau": date_bordereau,  # ‚úÖ Ajout de la date
        "no_bordereau": no_bordereau,  # ‚úÖ Ajout du num√©ro
        "nombre_factures": nombre_factures,
        "total_global": total_global,
        "total_global_lettres": total_global_lettres,  # üÜï Ajouter cette variable au template
    })


from django.shortcuts import render, redirect
from django.urls import reverse
from .forms import BordereauSelectionForm

def bordereau_selection_view(request):
    if request.method == 'POST':
        form = BordereauSelectionForm(request.POST)
        if form.is_valid():
            mois = form.cleaned_data['mois']
            annee = form.cleaned_data['annee']
            compagnie = form.cleaned_data['compagnie']  # c'est un objet CompagnieAerienne
            # => on r√©cup√®re le code iata :
            iata = compagnie.iata  # si c'est √ßa que tu utilises dans l'URL

            # Rediriger vers l'URL de bordereau :
            # par ex: /bordereau/2023/10/AFR/
            return redirect(
                'bordereau_detail',
                annee=annee,
                mois=mois,
                iata=iata
            )
    else:
        form = BordereauSelectionForm()

    return render(request, 'expertise/selection_bordereau.html', {'form': form})

from django.http import HttpResponse
from docx import Document
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT
from datetime import datetime
from django.shortcuts import get_object_or_404
from .models import CompagnieAerienne, FicheEvenement

from django.http import HttpResponse
from docx import Document
from docx.shared import Pt
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT
from docx.enum.table import WD_TABLE_ALIGNMENT
from docx.oxml import OxmlElement
from datetime import datetime
from django.shortcuts import get_object_or_404
from .models import CompagnieAerienne, FicheEvenement
from num2words import num2words  # Assure-toi que cette importation est bien l√†


def download_bordereau(request, mois, annee, iata):
    # üìå V√©rifier que la compagnie existe
    compagnie = get_object_or_404(CompagnieAerienne, iata=iata)

    # üìå Filtrer les √©v√©nements pour ce mois et cette ann√©e
    evenements = FicheEvenement.objects.filter(
        date_evenement__year=annee,
        date_evenement__month=mois,
        personnel__compagnie=compagnie
    )

    # üìå G√©n√©rer le num√©ro du bordereau
    date_creation = datetime.today()
    no_bordereau = f"EB{date_creation.day:02d}{mois:02d}{str(annee)[-2:]}{iata}"

    total_general = sum(evenement.total for evenement in evenements)
    total_global_lettres = num2words(total_general, lang='fr').capitalize()

    # üìå Cr√©ation du document Word
    doc = Document()

    # üìå Ajouter un pied de page avec le RIB sur chaque page
    section = doc.sections[0]
    footer = section.footer
    paragraph = footer.paragraphs[0]
    paragraph.text = "RIB BDT : 12239.00001.62288701000.14"
    paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    paragraph.runs[0].font.size = Pt(9)  # R√©duction de la taille du texte

    # üìå Ajouter l'en-t√™te
    for text, level in [
        ('Centre d‚ÄôExpertise M√©dicale du Personnel Naviguant', 1),
        ('BP 295 - 98713 Papeete', 2),
        ('Tel : 87.71.50.90 | Mel : cmpnpf@gmail.com', 2),
        ('Bordereau de d√©p√¥ts de factures', 1),
    ]:
        heading = doc.add_heading(text, level=level)
        heading.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER

    # üìå Informations du bordereau
    doc.add_paragraph("\n")
    doc.add_paragraph(f"üìÖ Date de cr√©ation : {date_creation.strftime('%d/%m/%Y')}")
    doc.add_paragraph(f"üìÑ Num√©ro du bordereau : {no_bordereau}")
    doc.add_paragraph(f"‚úàÔ∏è Compagnie a√©rienne : {compagnie.nom} ({compagnie.iata})")
    doc.add_paragraph("\n")

    # üìå Cr√©ation du tableau principal des factures
    table = doc.add_table(rows=1, cols=6)
    table.style = 'Table Grid'
    table.alignment = WD_TABLE_ALIGNMENT.CENTER  # Centrage du tableau

    # üìå Ajouter l'ent√™te du tableau
    hdr_cells = table.rows[0].cells
    headers = ["Num√©ro de facture", "DN", "Nom", "Pr√©nom", "Total (XPF)", "Paiement"]

    for i, header in enumerate(headers):
        hdr_cells[i].text = header
        hdr_cells[i].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER  # Centrer le texte
        hdr_cells[i].paragraphs[0].runs[0].bold = True  # Mettre en gras
        hdr_cells[i].paragraphs[0].runs[0].font.size = Pt(10)  # R√©duire la taille de la police

    # üìå Ajouter les donn√©es
    total_general = 0
    for evenement in evenements:
        row_cells = table.add_row().cells
        row_data = [
            evenement.no_facture or "N/A",
            evenement.personnel.dn,
            evenement.personnel.nom,
            evenement.personnel.prenom,
            f"{evenement.total} XPF",
            "‚úÖ Pay√©" if evenement.paiement else "‚ùå Non pay√©"
        ]

        for i, data in enumerate(row_data):
            row_cells[i].text = data
            row_cells[i].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER  # Centrer le texte
            row_cells[i].paragraphs[0].runs[0].font.size = Pt(9)  # R√©duire la taille de la police

        total_general += evenement.total

    # üìå Ajouter le r√©sum√©
    doc.add_paragraph("\n")
    summary = doc.add_paragraph()
    summary_run = summary.add_run(f"Nombre de factures : {evenements.count()}  |   Total g√©n√©ral : {total_general} XPF (soit {total_global_lettres} francs)")
    summary_run.bold = True


    # üìå Ajouter les factures d√©taill√©es
    for evenement in evenements:
        doc.add_page_break()
        
        # üìå R√©p√©ter l‚Äôen-t√™te
        for text, level in [
            ('Centre d‚ÄôExpertise M√©dicale du Personnel Naviguant', 1),
            ('BP 295 - 98713 Papeete', 2),
            ('Tel : 87.71.50.90 | Mel : cmpnpf@gmail.com', 2),
            (f"Facture {evenement.no_facture}", 2),
        ]:
            heading = doc.add_heading(text, level=level)
            heading.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER

        doc.add_paragraph("\n")
        doc.add_paragraph(f"DN : {evenement.personnel.dn}")
        doc.add_paragraph(f"Nom : {evenement.personnel.nom}")
        doc.add_paragraph(f"Pr√©nom : {evenement.personnel.prenom}")
        doc.add_paragraph(f"Date de l'√©v√©nement : {evenement.date_evenement.strftime('%d/%m/%Y')}")

        # üìå Tableau des consultations
        table = doc.add_table(rows=1, cols=4)
        table.style = 'Table Grid'
        table.alignment = WD_TABLE_ALIGNMENT.CENTER  # Centrage du tableau

        hdr_cells = table.rows[0].cells
        headers = ["Consultation", "Date", "Honoraire (XPF)", "M√©decin"]
        for i, header in enumerate(headers):
            hdr_cells[i].text = header
            hdr_cells[i].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
            hdr_cells[i].paragraphs[0].runs[0].bold = True
            hdr_cells[i].paragraphs[0].runs[0].font.size = Pt(10)

        consultations = [
            ("CEMPN", evenement.cs_cempn, evenement.date_cempn, evenement.honoraire_cempn, evenement.medecin_cempn),
            ("OPH", evenement.cs_oph, evenement.date_cs_oph, evenement.honoraire_cs_oph, evenement.medecin_oph),
            ("ORL", evenement.cs_orl, evenement.date_cs_orl, evenement.honoraire_cs_orl, evenement.medecin_orl),
            ("Radio", evenement.cs_radio, evenement.date_cs_radio, evenement.honoraire_cs_radio, evenement.medecin_radio),
            ("Labstix", evenement.cs_lbx, evenement.date_cs_lbx, evenement.honoraire_cs_lbx, None),
            ("Laboratoire AMJ", evenement.cs_labo, evenement.date_cs_labo, evenement.honoraire_cs_labo, None),
        ]

        for label, has_consult, date, honor, medecin in consultations:
            if has_consult:
                row_cells = table.add_row().cells
                row_data = [
                    label,
                    date.strftime('%d/%m/%Y') if date else "Non sp√©cifi√©e",
                    f"{honor} XPF" if honor else "0 XPF",
                    str(medecin) if medecin else "Non sp√©cifi√©"
                ]

                for i, data in enumerate(row_data):
                    row_cells[i].text = data
                    row_cells[i].paragraphs[0].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
                    row_cells[i].paragraphs[0].runs[0].font.size = Pt(9)

        # üìå R√©sum√© paiement
        doc.add_paragraph("\n **Frais et Paiements**")
        doc.add_paragraph(f"Frais de dossier : {evenement.frais_dossier} XPF")
        doc.add_paragraph(f"Total pay√© par l'Organisme : {evenement.total} XPF" " | " f"Quote-part patient : {'Oui' if evenement.quote_part_patient else 'Non'}")
        #doc.add_paragraph(f"Quote-part patient : {'Oui' if evenement.quote_part_patient else 'Non'}")
        doc.add_paragraph(f"Paiement : {'Pay√©' if evenement.paiement else 'Non pay√©'}")

        if evenement.paiement:
            doc.add_paragraph(f" - Pay√© le : {evenement.date_paiement.strftime('%d/%m/%Y') if evenement.date_paiement else 'Non sp√©cifi√©e'}")
            doc.add_paragraph(f" - Par : {evenement.get_modalite_paiement_display() if evenement.modalite_paiement else 'Non sp√©cifi√©e'}")

    # üìå G√©n√©rer le fichier Word
    response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.wordprocessingml.document')
    response['Content-Disposition'] = f'attachment; filename="Bordereau_{no_bordereau}.docx"'
    doc.save(response)

    return response  # ‚úÖ Retourner la r√©ponse HTTP







